diff --git a/ports/abseil/fix-universal2.patch b/ports/abseil/fix-universal2.patch
new file mode 100644
index 0000000000..c729e7ae48
--- /dev/null
+++ b/ports/abseil/fix-universal2.patch
@@ -0,0 +1,55 @@
+diff --git a/absl/copts/AbseilConfigureCopts.cmake b/absl/copts/AbseilConfigureCopts.cmake
+index 942ce90a4..15d6c895f 100644
+--- a/absl/copts/AbseilConfigureCopts.cmake
++++ b/absl/copts/AbseilConfigureCopts.cmake
+@@ -12,7 +12,49 @@ else()
+   set(ABSL_BUILD_DLL FALSE)
+ endif()
+
+-if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64")
++if(APPLE AND CMAKE_CXX_COMPILER_ID MATCHES [[Clang]])
++  # Some CMake targets (not known at the moment of processing) could be set to
++  # compile for multiple architectures as specified by the OSX_ARCHITECTURES
++  # property, which is target-specific.  We should neither inspect nor rely on
++  # any CMake property or variable to detect an architecture, in particular:
++  #
++  #   - CMAKE_OSX_ARCHITECTURES
++  #     is just an initial value for OSX_ARCHITECTURES; set too early.
++  #
++  #   - OSX_ARCHITECTURES
++  #     is a per-target property; targets could be defined later, and their
++  #     properties could be modified any time later.
++  #
++  #   - CMAKE_SYSTEM_PROCESSOR
++  #     does not reflect multiple architectures at all.
++  #
++  # When compiling for multiple architectures, a build system can invoke a
++  # compiler either
++  #
++  #   - once: a single command line for multiple architectures (Ninja build)
++  #   - twice: two command lines per each architecture (Xcode build system)
++  #
++  # If case of Xcode, it would be possible to set an Xcode-specific attributes
++  # like XCODE_ATTRIBUTE_OTHER_CPLUSPLUSFLAGS[arch=arm64] or similar.
++  #
++  # In both cases, the viable strategy is to pass all arguments at once, allowing
++  # the compiler to dispatch arch-specific arguments to a designated backend.
++  set(ABSL_RANDOM_RANDEN_COPTS "")
++  foreach(_arch IN ITEMS "x86_64" "arm64")
++    string(TOUPPER "${_arch}" _arch_uppercase)
++    string(REPLACE "X86_64" "X64" _arch_uppercase ${_arch_uppercase})
++    foreach(_flag IN LISTS ABSL_RANDOM_HWAES_${_arch_uppercase}_FLAGS)
++      list(APPEND ABSL_RANDOM_RANDEN_COPTS "-Xarch_${_arch}" "${_flag}")
++    endforeach()
++  endforeach()
++  # If a compiler happens to deal with an argument for a currently unused
++  # architecture, it will warn about an unused command line argument.
++  option(ABSL_RANDOM_RANDEN_COPTS_WARNING OFF
++         "Warn if one of ABSL_RANDOM_RANDEN_COPTS is unused")
++  if(ABSL_RANDOM_RANDEN_COPTS AND NOT ABSL_RANDOM_RANDEN_COPTS_WARNING)
++    list(APPEND ABSL_RANDOM_RANDEN_COPTS "-Wno-unused-command-line-argument")
++  endif()
++elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64")
+   if (MSVC)
+     set(ABSL_RANDOM_RANDEN_COPTS "${ABSL_RANDOM_HWAES_MSVC_X64_FLAGS}")
+   else()
diff --git a/ports/abseil/portfile.cmake b/ports/abseil/portfile.cmake
index 1289eed36a..b010a69f13 100644
--- a/ports/abseil/portfile.cmake
+++ b/ports/abseil/portfile.cmake
@@ -15,6 +15,7 @@ vcpkg_from_github(
         # detection can cause ABI issues depending on which compiler options
         # are enabled for consuming user code
 	    fix-cxx-standard.patch
+        fix-universal2.patch
 )
 
 vcpkg_check_features(OUT_FEATURE_OPTIONS FEATURE_OPTIONS
diff --git a/ports/aws-sdk-cpp/fix-find-crypto.patch b/ports/aws-sdk-cpp/fix-find-crypto.patch
new file mode 100644
index 0000000000..aafc631e93
--- /dev/null
+++ b/ports/aws-sdk-cpp/fix-find-crypto.patch
@@ -0,0 +1,20 @@
+diff --git a/cmake/setup_cmake_find_module.cmake b/cmake/setup_cmake_find_module.cmake
+index f5f147a0f..4561b8c39 100644
+--- a/cmake/setup_cmake_find_module.cmake
++++ b/cmake/setup_cmake_find_module.cmake
+@@ -30,15 +30,6 @@ file(WRITE
+     "set(AWSSDK_INSTALL_BINDIR ${BINARY_DIRECTORY})\n"
+     "set(AWSSDK_INSTALL_INCLUDEDIR ${INCLUDE_DIRECTORY})\n"
+     "set(AWSSDK_INSTALL_ARCHIVEDIR ${ARCHIVE_DIRECTORY})\n"
+-    "if (NOT LibCrypto_INCLUDE_DIR)\n"
+-    "    set(LibCrypto_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR} CACHE INTERNAL \"The OpenSSL include directory\")\n"
+-    "endif()\n"
+-    "if (NOT LibCrypto_STATIC_LIBRARY)\n"
+-    "    set(LibCrypto_STATIC_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL \"The OpenSSL crypto static library\")\n"
+-    "endif()\n"
+-    "if (NOT LibCrypto_SHARED_LIBRARY)\n"
+-    "    set(LibCrypto_SHARED_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL \"The OpenSSL crypto shared library\")\n"
+-    "endif()\n"
+     )
+
+ if (NOT SIMPLE_INSTALL)
diff --git a/ports/aws-sdk-cpp/portfile.cmake b/ports/aws-sdk-cpp/portfile.cmake
index b520a17ae3..ea9e770cf5 100644
--- a/ports/aws-sdk-cpp/portfile.cmake
+++ b/ports/aws-sdk-cpp/portfile.cmake
@@ -8,6 +8,7 @@ vcpkg_from_github(
     PATCHES
         patch-relocatable-rpath.patch
         fix-aws-root.patch
+        fix-find-crypto.patch
 )
 
 string(COMPARE EQUAL "${VCPKG_CRT_LINKAGE}" "dynamic" FORCE_SHARED_CRT)
diff --git a/ports/curl/portfile.cmake b/ports/curl/portfile.cmake
index f81d0c491d..e5ea9cef57 100644
--- a/ports/curl/portfile.cmake
+++ b/ports/curl/portfile.cmake
@@ -88,6 +88,10 @@ vcpkg_cmake_configure(
         -DCMAKE_DISABLE_FIND_PACKAGE_Perl=ON
         -DENABLE_DEBUG=ON
         -DCURL_CA_FALLBACK=ON
+        -DCURL_CA_PATH=none
+        -DCURL_CA_BUNDLE=none
+    OPTIONS_DEBUG
+        ${EXTRA_ARGS_DEBUG}
     OPTIONS_RELEASE
         ${OPTIONS_RELEASE}
     OPTIONS_DEBUG
diff --git a/ports/snappy/portfile.cmake b/ports/snappy/portfile.cmake
index 45b8c706db..b409d8a7be 100644
--- a/ports/snappy/portfile.cmake
+++ b/ports/snappy/portfile.cmake
@@ -4,6 +4,7 @@ vcpkg_from_github(
     REF 1.1.9
     SHA512 f1f8a90f5f7f23310423574b1d8c9acb84c66ea620f3999d1060395205e5760883476837aba02f0aa913af60819e34c625d8308c18a5d7a9c4e190f35968b024
     HEAD_REF master
+    PATCHES "snappy-disable-bmi.patch"
 )
 
 vcpkg_cmake_configure(
diff --git a/ports/snappy/snappy-disable-bmi.patch b/ports/snappy/snappy-disable-bmi.patch
new file mode 100644
index 0000000000..a57ce0c22f
--- /dev/null
+++ b/ports/snappy/snappy-disable-bmi.patch
@@ -0,0 +1,19 @@
+diff --git a/snappy.cc b/snappy.cc
+index 79dc0e8..f3153ea 100644
+--- a/snappy.cc
++++ b/snappy.cc
+@@ -965,14 +965,10 @@ static inline void Report(const char *algorithm, size_t compressed_size,
+ static inline uint32_t ExtractLowBytes(uint32_t v, int n) {
+   assert(n >= 0);
+   assert(n <= 4);
+-#if SNAPPY_HAVE_BMI2
+-  return _bzhi_u32(v, 8 * n);
+-#else
+   // This needs to be wider than uint32_t otherwise `mask << 32` will be
+   // undefined.
+   uint64_t mask = 0xffffffff;
+   return v & ~(mask << (8 * n));
+-#endif
+ }
+ 
+ static inline bool LeftShiftOverflows(uint8_t value, uint32_t shift) {
diff --git a/ports/zlib/0002-skip-building-examples.patch b/ports/zlib/0002-skip-building-examples.patch
new file mode 100644
index 000000000..8183f2ab2
--- /dev/null
+++ b/ports/zlib/0002-skip-building-examples.patch
@@ -0,0 +1,17 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index b412dc7..f46c8e6 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -194,6 +194,7 @@ endif()
+ # Example binaries
+ #============================================================================
+ 
++if (0)
+ add_executable(example test/example.c)
+ target_link_libraries(example zlib)
+ add_test(example example)
+@@ -211,3 +212,4 @@ if(HAVE_OFF64_T)
+     target_link_libraries(minigzip64 zlib)
+     set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
+ endif()
++endif()
diff --git a/ports/zlib/0003-build-static-or-shared-not-both.patch b/ports/zlib/0003-build-static-or-shared-not-both.patch
new file mode 100644
index 000000000..c9f2ecf19
--- /dev/null
+++ b/ports/zlib/0003-build-static-or-shared-not-both.patch
@@ -0,0 +1,53 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index f46c8e6..6fa5575 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -121,9 +121,11 @@ set(ZLIB_SRCS
+ )
+ 
+ if(NOT MINGW)
++    if(BUILD_SHARED_LIBS)
+     set(ZLIB_DLL_SRCS
+         win32/zlib1.rc # If present will override custom build rule below.
+     )
++    endif()
+ endif()
+ 
+ # parse the full version number from zlib.h and include in ZLIB_FULL_VERSION
+@@ -144,13 +146,16 @@ if(MINGW)
+                             -I ${CMAKE_CURRENT_BINARY_DIR}
+                             -o ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj
+                             -i ${CMAKE_CURRENT_SOURCE_DIR}/win32/zlib1.rc)
++    if(BUILD_SHARED_LIBS)
+     set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)
++    endif()
+ endif(MINGW)
+ 
+-add_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
+-add_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
++add_library(zlib ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
++if (BUILD_SHARED_LIBS)
+ set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
+ set_target_properties(zlib PROPERTIES SOVERSION 1)
++endif()
+ 
+ if(NOT CYGWIN)
+     # This property causes shared libraries on Linux to have the full version
+@@ -165,7 +170,7 @@ endif()
+ 
+ if(UNIX)
+     # On unix-like platforms the library is almost always called libz
+-   set_target_properties(zlib zlibstatic PROPERTIES OUTPUT_NAME z)
++   set_target_properties(zlib PROPERTIES OUTPUT_NAME z)
+    if(NOT APPLE)
+      set_target_properties(zlib PROPERTIES LINK_FLAGS "-Wl,--version-script,\"${CMAKE_CURRENT_SOURCE_DIR}/zlib.map\"")
+    endif()
+@@ -175,7 +180,7 @@ elseif(BUILD_SHARED_LIBS AND WIN32)
+ endif()
+ 
+ if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )
+-    install(TARGETS zlib zlibstatic
++    install(TARGETS zlib
+         RUNTIME DESTINATION "${INSTALL_BIN_DIR}"
+         ARCHIVE DESTINATION "${INSTALL_LIB_DIR}"
+         LIBRARY DESTINATION "${INSTALL_LIB_DIR}" )
diff --git a/ports/zlib/0002-android-build-mingw.patch b/ports/zlib/0004-android-and-mingw-fixes.patch
similarity index 52%
rename from ports/zlib/0002-android-build-mingw.patch
rename to ports/zlib/0004-android-and-mingw-fixes.patch
index 188499df0..e93173f24 100644
--- a/ports/zlib/0002-android-build-mingw.patch
+++ b/ports/zlib/0004-android-and-mingw-fixes.patch
@@ -1,7 +1,17 @@
 diff --git a/CMakeLists.txt b/CMakeLists.txt
---- a/CMakeLists.txt   (date 1618364429263)
-+++ b/CMakeLists.txt   (date 1618364429263)
-@@ -170,7 +170,7 @@
+index 6fa5575..7c345db 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -56,7 +56,7 @@ endif()
+ #
+ check_include_file(unistd.h Z_HAVE_UNISTD_H)
+ 
+-if(MSVC)
++if(WIN32)
+     set(CMAKE_DEBUG_POSTFIX "d")
+     add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
+     add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
+@@ -133,7 +133,7 @@ file(READ ${CMAKE_CURRENT_SOURCE_DIR}/zlib.h _zlib_h_contents)
  string(REGEX REPLACE ".*#define[ \t]+ZLIB_VERSION[ \t]+\"([-0-9A-Za-z.]+)\".*"
      "\\1" ZLIB_FULL_VERSION ${_zlib_h_contents})
  
@@ -10,12 +20,12 @@ diff --git a/CMakeLists.txt b/CMakeLists.txt
      # This gets us DLL resource information when compiling on MinGW.
      if(NOT CMAKE_RC_COMPILER)
          set(CMAKE_RC_COMPILER windres.exe)
-@@ -186,7 +186,7 @@
+@@ -149,7 +149,7 @@ if(MINGW)
      if(BUILD_SHARED_LIBS)
-         set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)
+     set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)
      endif()
 -endif(MINGW)
 +endif(MINGW AND NOT ANDROID)
  
  add_library(zlib ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
- set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
+ if (BUILD_SHARED_LIBS)
diff --git a/ports/zlib/LICENSE b/ports/zlib/LICENSE
deleted file mode 100644
index ca5fddfe0..000000000
--- a/ports/zlib/LICENSE
+++ /dev/null
@@ -1,20 +0,0 @@
-  Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler
-
-  This software is provided 'as-is', without any express or implied
-  warranty.  In no event will the authors be held liable for any damages
-  arising from the use of this software.
-
-  Permission is granted to anyone to use this software for any purpose,
-  including commercial applications, and to alter it and redistribute it
-  freely, subject to the following restrictions:
-
-  1. The origin of this software must not be misrepresented; you must not
-     claim that you wrote the original software. If you use this software
-     in a product, an acknowledgment in the product documentation would be
-     appreciated but is not required.
-  2. Altered source versions must be plainly marked as such, and must not be
-     misrepresented as being the original software.
-  3. This notice may not be removed or altered from any source distribution.
-
-  Jean-loup Gailly        Mark Adler
-  jloup@gzip.org          madler@alumni.caltech.edu
\ No newline at end of file
diff --git b/ports/zlib/add_debug_postfix_on_mingw.patch a/ports/zlib/add_debug_postfix_on_mingw.patch
deleted file mode 100644
index 22172ccfc..000000000
--- b/ports/zlib/add_debug_postfix_on_mingw.patch
+++ /dev/null
@@ -1,13 +0,0 @@
-diff --git a/CMakeLists.txt b/CMakeLists.txt
-index 0fe939d..e4fc213 100644
---- a/CMakeLists.txt
-+++ b/CMakeLists.txt
-@@ -59,7 +59,7 @@ endif()
- #
- check_include_file(unistd.h Z_HAVE_UNISTD_H)
- 
--if(MSVC)
-+if(WIN32)
-     set(CMAKE_DEBUG_POSTFIX "d")
-     add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
-     add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
diff --git a/ports/zlib/portfile.cmake b/ports/zlib/portfile.cmake
index f1699178f..450cb2c19 100644
--- a/ports/zlib/portfile.cmake
+++ b/ports/zlib/portfile.cmake
@@ -1,56 +1,53 @@
-set(VERSION 1.2.12)
-
-vcpkg_download_distfile(ARCHIVE_FILE
-    URLS "https://www.zlib.net/zlib-${VERSION}.tar.gz"
-    FILENAME "zlib1212.tar.gz"
-    SHA512 cc2366fa45d5dfee1f983c8c51515e0cff959b61471e2e8d24350dea22d3f6fcc50723615a911b046ffc95f51ba337d39ae402131a55e6d1541d3b095d6c0a14
-)
-
-vcpkg_extract_source_archive_ex(
+# When this port is updated, the minizip port should be updated at the same time
+vcpkg_from_github(
     OUT_SOURCE_PATH SOURCE_PATH
-    ARCHIVE ${ARCHIVE_FILE}
-    REF ${VERSION}
+    REPO madler/zlib
+    REF v1.2.13
+    SHA512 44b834fbfb50cca229209b8dbe1f96b258f19a49f5df23b80970b716371d856a4adf525edb4c6e0e645b180ea949cb90f5365a1d896160f297f56794dd888659
+    HEAD_REF master
     PATCHES
-        "cmake_dont_build_more_than_needed.patch"
-        "0001-Prevent-invalid-inclusions-when-HAVE_-is-set-to-0.patch"
-        "add_debug_postfix_on_mingw.patch"
-        "0002-android-build-mingw.patch"
+        0001-Prevent-invalid-inclusions-when-HAVE_-is-set-to-0.patch
+        0002-skip-building-examples.patch
+        0003-build-static-or-shared-not-both.patch
+        0004-android-and-mingw-fixes.patch
 )
 
 # This is generated during the cmake build
-file(REMOVE ${SOURCE_PATH}/zconf.h)
+file(REMOVE "${SOURCE_PATH}/zconf.h")
 
-vcpkg_configure_cmake(
-    SOURCE_PATH ${SOURCE_PATH}
-    PREFER_NINJA
+vcpkg_cmake_configure(
+    SOURCE_PATH "${SOURCE_PATH}"
     OPTIONS
         -DSKIP_INSTALL_FILES=ON
-        -DSKIP_BUILD_EXAMPLES=ON
     OPTIONS_DEBUG
         -DSKIP_INSTALL_HEADERS=ON
 )
 
-vcpkg_install_cmake()
-file(INSTALL ${CMAKE_CURRENT_LIST_DIR}/vcpkg-cmake-wrapper.cmake DESTINATION ${CURRENT_PACKAGES_DIR}/share/${PORT})
+vcpkg_cmake_install()
+file(INSTALL "${CMAKE_CURRENT_LIST_DIR}/vcpkg-cmake-wrapper.cmake" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}")
 
 # Install the pkgconfig file
 if(NOT DEFINED VCPKG_BUILD_TYPE OR VCPKG_BUILD_TYPE STREQUAL "release")
     if(VCPKG_TARGET_IS_WINDOWS)
-        vcpkg_replace_string(${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel/zlib.pc "-lz" "-lzlib")
+        vcpkg_replace_string("${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel/zlib.pc" "-lz" "-lzlib")
     endif()
-    file(COPY ${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel/zlib.pc DESTINATION ${CURRENT_PACKAGES_DIR}/lib/pkgconfig)
+    file(COPY "${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel/zlib.pc" DESTINATION "${CURRENT_PACKAGES_DIR}/lib/pkgconfig")
 endif()
 if(NOT DEFINED VCPKG_BUILD_TYPE OR VCPKG_BUILD_TYPE STREQUAL "debug")
     if(VCPKG_TARGET_IS_WINDOWS)
-        vcpkg_replace_string(${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-dbg/zlib.pc "-lz" "-lzlibd")
+        vcpkg_replace_string("${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-dbg/zlib.pc" "-lz" "-lzlibd")
     endif()
-    file(COPY ${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-dbg/zlib.pc DESTINATION ${CURRENT_PACKAGES_DIR}/debug/lib/pkgconfig)
+    file(COPY "${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-dbg/zlib.pc" DESTINATION "${CURRENT_PACKAGES_DIR}/debug/lib/pkgconfig")
 endif()
 
 vcpkg_fixup_pkgconfig()
-
-file(INSTALL ${CMAKE_CURRENT_LIST_DIR}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/${PORT} RENAME copyright)
-
 vcpkg_copy_pdbs()
 
-file(COPY ${CMAKE_CURRENT_LIST_DIR}/usage DESTINATION ${CURRENT_PACKAGES_DIR}/share/${PORT})
+if(VCPKG_LIBRARY_LINKAGE STREQUAL "static")
+    vcpkg_replace_string("${CURRENT_PACKAGES_DIR}/include/zconf.h" "ifdef ZLIB_DLL" "if 0")
+else()
+    vcpkg_replace_string("${CURRENT_PACKAGES_DIR}/include/zconf.h" "ifdef ZLIB_DLL" "if 1")
+endif()
+
+file(COPY "${CMAKE_CURRENT_LIST_DIR}/usage" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}")
+file(INSTALL "${SOURCE_PATH}/LICENSE" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}" RENAME copyright)
diff --git a/ports/zlib/vcpkg.json b/ports/zlib/vcpkg.json
index d147fad30..7ef1f29d8 100644
--- a/ports/zlib/vcpkg.json
+++ b/ports/zlib/vcpkg.json
@@ -1,6 +1,13 @@
 {
   "name": "zlib",
-  "version": "1.2.12",
+  "version": "1.2.13",
   "description": "A compression library",
-  "homepage": "https://www.zlib.net/"
+  "homepage": "https://www.zlib.net/",
+  "license": "Zlib",
+  "dependencies": [
+    {
+      "name": "vcpkg-cmake",
+      "host": true
+    }
+  ]
 }
 